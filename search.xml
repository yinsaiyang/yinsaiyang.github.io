<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[mysql1]]></title>
    <url>%2F2018%2F09%2F18%2Fmysql1%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[mysql]]></title>
    <url>%2F2018%2F09%2F18%2Fmysql%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[mysql]]></title>
    <url>%2F2018%2F09%2F18%2Fmysql%2Fmysql%2F</url>
    <content type="text"><![CDATA[1)创建数据库 create database wpj1105; 2)创建数据库 create database wpj1105; 3)判断是否存在库 : drop database if exists wpj1105; 4)使用该数据库 use wpj1105; 5)#显示数据库中的表 show tables; 6)创建表create table student( id int auto_increment primary key, name varchar(50) not null, sex varchar(20), date varchar(50), content varchar(100) )default charset=utf8; 7)查找表 select xxxxx from student; 8)显示表的结构：desc student; 9)添加数据 insert into student values(null,’aa’,’男’,’1988-10-2’,’……’); 10)修改数据表的编码方式:ALTER TABLE test DEFAULT CHARACTER SET utf8 11)ALTER TABLE test CHANGE name name VARCHAR(36) CHARACTER SET utf8 NOT NULL; 该命令用于将表test中name字段的编码方式改为utf8 12)修改某一条数据update student set sex=’男’ where id=4; 13)delete from student where id=5; 14删除数据delete from student where id=5; 15)# and 且select from student where date&gt;’1988-1-2’ and date&lt;’1988-12-1’; 16)# or 或 select from student where date&lt;’1988-11-2’ or date&gt;’1988-12-1’; 17)#between select * from student where date between ‘1988-1-2’and’1988-12-1’; 18)修改数据update c set age=66 where id=2;update c set name=’花花’,age=21,sex=’女’ where id=2]]></content>
  </entry>
  <entry>
    <title><![CDATA[jekins]]></title>
    <url>%2F2018%2F09%2F01%2Fjekins%2F</url>
    <content type="text"><![CDATA[Jenkins是一款能提高效率的软件，它能帮你把软件开发过程形成工作流，典型的工作流包括以下几个步骤 开发 提交 编译 测试 发布 有了Jenkins的帮助，在这5步中，除了第1步，后续的4步都是自动化完成的，具体的，当你完成了提交，Jenkins会自动运行你的编译脚本，编译成功后，再运行你的测试脚本，这一步成功后，接着它会帮你把新程序发布出去，特别的，在最后一步，你可以选择手动发布，或自动发布，毕竟发布这件事情，还是需要人为的确认一下比较好。简而言之 Jenkins可以帮你在写完代码后，一键完成开发过程中的一系列工作 使用Jenkins的好处显而易见，它减少了你的重复劳动。更重要的是，一个团队的开发流程一开始是不一致的，不一致往往会带来各种各样的问题，最终体现在软件的质量或开发效率不够高，而Jenkins会帮你规范大家的行为，从而避免一系列的问题。安装 Jenkins安装非常简单，以CentOS为例，执行以下命令即可 sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat-stable/jenkins.reposudo rpm –import https://jenkins-ci.org/redhat/jenkins-ci.org.keysudo yum -y install jenkins 值得注意的是，如果你的操作系统是CentOS，且运行的是GCJ版本的java，则需要做一下更新 $ java -versionjava version “1.5.0”gij (GNU libgcj) version 4.4.6 20110731 (Red Hat 4.4.6-3)$ sudo yum remove java$ sudo yum install -y java-1.7.0-openjdk$ java -versionjava version “1.7.0_79”OpenJDK Runtime Environment (rhel-2.5.5.1.el6_6-x86_64 u79-b14)OpenJDK 64-Bit Server VM (build 24.79-b02, mixed mode) 如果你的Jenkins使用git作为数据传输的管道，那么的所有Jenkins节点都要安装git $ sudo yum install -y git 设置git账户 $ git config –global user.name “yourname”$ git config –global user.email “yourmail” 配置 安装成功后，配置文件在/etc/sysconfig/jenkins下，默认端口为8080，你需要设置一下防火墙，让该端口可以被外部访问到 设置允许开机启动 $ sudo chkconfig jenkins on 确保系统中有一个jenkins账户，如果没有则需要创建，理论上安装了Jenkins后，会自动创建该用户。 然后创建ssh密钥，密钥被用来在多个节点中进行免密访问，同时帮助打通git数据通道。在这之前要确认jenkins用户的home目录是否有效（在下面的例子中home是/var/bin/jenkins），并切换到jenkins用户下 $ grep jenkins /etc/passwdjenkins:x:496:496:Jenkins Continuous Integration Server:/var/lib/jenkins:/bin/bash$ su jenkins$ cd ~$ pwd/var/lib/jenkins 创建非对称密钥，执行ssh-keygen命令，并一路回车 $ ssh-keygenGenerating public/private rsa key pair.Enter file in which to save the key (/home/fengyajie/.ssh/id_rsa): Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in /home/fengyajie/.ssh/id_rsa.Your public key has been saved in /home/fengyajie/.ssh/id_rsa.pub.The key fingerprint is:The key’s randomart image is:+–[ RSA 2048]—-+| …. +=|| … …..|| . …o +|| E. . *.|| S .= + || . o + . || . o o || o o || o |+—————–+$ ls ~/.ssh/id_rsa id_rsa.pub known_hosts Jenkins是一个Master-Slave的架构，它可以把任务发布到不同的节点上执行，典型的应用场景是你有2个运行环境，一个是测试环境，一个是生产环境，你可以指定工作流中，哪些任务在测试环境中执行，哪些任务在生产环境中执行。当然，如果你没有这样的需求，也可以不配置Slave，这篇文章讨论的是有Slave的情况。 如果你需要配置Slave，在Slave节点上创建一个jenkins用户，并建立Master和Slave的授信关系（你需要将下面的host替换为具体的服务器IP，注意一定要保证Master和Slave之间是内网通信的，否则公网环境延迟较大，经常会出现Slave掉线情况） ssh jenkins@host ‘mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys’ &lt; ~/.ssh/id_rsa.pub 同时，为了让jenkins可以执行更高权限的命令，所有节点都需要把jenkins用户设置为sudo用户。当然，我这是为了偷懒，更好的办法是设置一个专门的用户组，让这个组有一定的权限，然后把jenkins加入到这个用户组。 $ sudo grep jenkins /etc/sudoersjenkins ALL=(ALL) NOPASSWD: ALL 以上为全部终端的配置，剩下操作基本都在Jenkins提供的web页面上完成设置Slave 打开Jenkins页面http://hostname:8080，进入管理页面，点击New Node 配置Node，Labels是环境设置，例如开发环境，测试环境，编译环境等，后续可以根据Lables值，指定具体的任务在某个环境中执行 设置Master到Node间的授信方式 成功后，可以在控制台看到新增的Node创建Pipeline 基本环境搭建好后，我们来配置一个工作流亲自感受一下 工作流在Jenkins中被称为pipeline，pipeline的运行行为由用户自己定义，定义的内容存放在一个Jenkinsfile文件中，并将该文件存放在git仓库的根目录，大致的流程如下： 用户将代码提交到git Jenkins从git拉取最新代码 读取根目录下的Jenkinsfile文件，并依次执行文件中定义的任务 下面是具体的配置步骤编写Jenkinsfile pipeline { agent { label ‘Production’ } stages { stage(‘Build’) { steps { echo ‘Building’ } } stage(‘Test’) { steps { echo ‘Testing’ } } stage(‘Deploy - Staging’) { steps { sh ‘./deploy staging’ sh ‘./run-smoke-tests’ } } stage(‘Sanity check’) { steps { input “Does the staging environment look ok?” } } stage(‘Deploy - Production’) { steps { sh ‘./deploy production’ } } } post { always { echo &apos;One way or another, I have finished&apos; deleteDir() /* clean up our workspace */ } success { echo &apos;I succeeeded!&apos; } unstable { echo &apos;I am unstable :/&apos; } failure { echo &apos;I failed :(&apos; } changed { echo &apos;Things were different before...&apos; } } } 以上是一个基本的Jenkinsfile模板，其中有以下几个关键概念 agent - 指定在哪台机器上执行任务，还记得上面配置Node时候填的Label吗，如果这两个label匹配得上，就在该Node中执行 stage - 组成工作流的大的步骤，这些步骤是串行的，例如build，test，deploy等 steps - 描述stage中的小步骤，同一个stage中的steps可以并行 sh - 执行shell命令 input - 需要你手动点击确定，Pipeline才会进入后续环节，常用于部署环节，因为很多时候部署都需要人为的进行一些确认 post - 所有pipeline执行完成后，会进入post环节，该环节一般做一些清理工作，同时还可以判断pipeline的执行状态 了解了这些后，你会发现写一个Jenkinsfile是一件很容易的事情。好了，现在要测试pipeline功能，把上面的代码中的sh换成echo，拷贝到你的Jenkinsfile中，并存放在git仓库的根目录创建pipeline 回到Jenkins web页面，添加pipeline 如果你想每次git commit时自动执行该pipeline，有两种方法，一种是让Jenkins对git进行轮询，每分钟检查git仓库有没有更新，如下配置 另一种方式是使用git提供的hook，该方式原理是git一旦提交，便会触发hook中的脚本，让脚本给Jenkins发送执行pipeline的指令，这种方式更优雅，但相应要做的事情更多一点，这里就不演示这种方法了，感兴趣的同学可以自己研究一下。 最后，我们需要设置git的地址，其中的授信设置，和上面说的Master到Node的授信设置一致 设置完毕后，一旦你的git仓库收到新的提交，就会触发这个pipeline的运行，以下这张图是上面Jenkinsfile例子的运行状态，可以看到当运行到Sanity check这一步时，需要你手动触发是否执行后面的操作。 下面我们来总结一下，这篇教程主要讲述了以下几个方面： Jenkins是什么，及它的应用场景举例 如何搭建一个Jenkins服务 Jenkins Pileline是什么，我们如何定义一个Pipeline 如何具体的操作一个Pipeline Have fun！ 作者：冯雅杰链接：https://www.jianshu.com/p/b524b151d35f來源：简书简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。]]></content>
  </entry>
  <entry>
    <title><![CDATA[linus]]></title>
    <url>%2F2018%2F08%2F31%2Flinus%2F</url>
    <content type="text"><![CDATA[2017 年 6 月，Linux 基金会首次在中国召开 LinuxCon，有幸见到 Linus Torvalds 本尊，从进入媒体视线、访谈交流到离开的三个多小时内，Linus Torvalds 一直面带微笑。 在我看来，这种微笑不是职业训练出来的，而是一个纯粹技术人发自内心的表达。这位名扬 IT 界二十余载的神级人物，想必早已过了恃才傲物、口沸目赤的阶段，内心充盈的更多是工作中获得的欣慰与肩负的责任。 在他提到不想关心 Linux 技术以外的任何事情、一周不写代码就坐立不安的时候，我似乎看见了那个 11 岁学习 BASIC 并从此再也没有离开自己所爱的大男孩儿，拥有一颗不老心的 Linus Torvalds 依然葆有着他的技术好奇。 以下文字由 InfoQ 主要整理自 LinuxCon 大会上的媒体访谈及 Linus Tourvalds、Dirk Hohndel 的交流环节。 除了技术的其他一切工作都交给基金会打理 创建之后的Linux 系统越做越好并受到广泛关注，Linus Torvalds 于 2003 年决定离开当时的公司、加入开源码发展实验室以专职投入到 Linux 内核的工作，后来 Linux 基金会正式成立。 Linus 只想做技术，不想处理技术以外的事情。“如果你是一名工程师，很有可能你只想处理自己感兴趣的技术问题，其他一切事情你都想移交给别人来处理。” 正如所愿，这就是 Linus Torvalds 和基金会的分工，基金会负责接管许可证、专利、法务等问题，处理电话、邮件和文件准备等工作，事无巨细。LinusTorvalds 说他很庆幸自己不需要担心商业和管理的问题，他只要能领到工资不担心养孩子上学的问题就很好。 Linux 基金会执行总监 Jim Zemlin 称这是正确的模式： Linux 操作系统标准价值 103 亿美元；Linux 基金会拥有 Linux、Kubernetes、Cloud Foundry、Xen 等项目，以及 CNCF 基金会、Node 基金会等，整体所写的代码价值标准为 145 亿美元；由此估算 Linux 的经济价值占据整体价值 71%，不愧为开源项目鼻祖]]></content>
  </entry>
</search>
