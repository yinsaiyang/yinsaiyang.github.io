<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ansible]]></title>
    <url>%2F2018%2F11%2F22%2Fansible%2F</url>
    <content type="text"><![CDATA[Ansible是一个配置管理和配置工具，类似于Chef，Puppet或Salt。这是一款很简单也很容易入门的部署工具，它使用SSH连接到服务器并运行配置好的任务，服务器上不用安装任何多余的软件，只需要开启ssh，所有工作都交给client端的ansible负责。关于Ansible的一个好处是，将bash脚本转换为可执行任务是非常容易的。我们可以编写自己的配置程序，但是Ansible更加干净，因为它可以自动在执行任务之前获取上下文。ansible任务是幂等的，没有大量额外的编码，ansible可以一次又一次地安全运，而bash命令这种幂等性。ansible使用“facts”来确保任务的幂等安全运行， 它是在运行任务之前收集的系统和环境信息。ansible使用这些facts来检查状态，看看是否需要改变某些东西以获得所需的结果。这使得ansible可以让服务器一次又一次地运行可复制的任务yum -y install ansible]]></content>
  </entry>
  <entry>
    <title><![CDATA[zabbix1]]></title>
    <url>%2F2018%2F10%2F02%2Fzabbix1%2F</url>
    <content type="text"><![CDATA[zabbix安装server端下载yum源rpm -i https://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpmagent端下载yum源rpm -i https://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm一.Zabbix简介 zabbix是一个基于WEB界面的提供分布式系统监视以及网络监视功能的企业级的开源解决方案。 zabbix由zabbix server与可选组件zabbix agent两部门组成。 zabbix server可以通过SNMP，zabbix agent，ping，端口监视等方法提供对远程服务器/网络状态的监视。 zabbix agent需要安装在被监视的目标服务器上，它主要完成对硬件信息或与操作系统有关的内存，CPU等信息的收集。 Agent/Server被监控主机：Agent服务器：SERVER存储：mysql/mysqlweb GUI:PHPAMP,NMP:管理，展示安装zabbix参考https://www.zabbix.com/download?zabbix=3.4&amp;os_distribution=centos&amp;os_version=7&amp;db=MySQL 下面装server端[#17#root@centos7 ~]$yum install mariadb-server[#10#root@centos7 ~]$vim /etc/my.cnf.d/server.cnfskip_name_resolve = ON //跳过域名解析innodb_file_per_table = ON[#20#root@centos7 ~]$mysql_secure_installation //设置密码[#17#root@centos7 ~]$mysql -uroot -p123456 //登陆create database zabbix character set utf8 collate utf8_bin; //创建库MariaDB [(none)]&gt; grant all privileges on zabbix. to zabbix@localhost identified by ‘centos’; //授权账号和密码MariaDB [(none)]&gt; FLUSH PRIVILEGES; 刷新数据库再安装zabbix的yum仓库，下面这个十自动生成yum仓库[#23#root@centos7 ~]$rpm -i http://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/zabbix-release-3.4-2.el7.noarch.rpmwarning: /var/tmp/rpm-tmp.SGSdpS: Header V4 RSA/SHA512 Signature, key ID a14fe591: NOKEYyum install zabbix-server-mysql zabbix-web-mysql zabbix-agent[#34#root@centos7 ~]$systemctl start zabbix-agent agent监听再10050端口上下面安装或者导入zabbix的数据库[#32#root@centos7 ~]$zcat /usr/share/doc/zabbix-server-mysql/create.sql.gz | mysql -uzabbix -p zabbixEnter password:centos登陆[#38#root@centos7 ~]$mysql -uzabbix -p zabbixEnter password:MariaDB [zabbix]&gt; show tables; 设置zabbix密码[#39#root@centos7 ~]$cd /etc/zabbix[#41#root@centos7 /etc/zabbix]$vim zabbix_server.confDBPassword=centos[#46#root@centos7 /etc/zabbix]$systemctl start zabbix-server备注（server监听再10051端口上），agent监听再10050端口上 设置时区[#50#root@centos7 /etc/httpd/conf.d]$vim zabbix.conf php_value date.timezone Asia/Shanghai [#51#root@centos7 /etc/httpd/conf.d]$systemctl start httpd访问，启动安装过程 密码是、[#62#root@centos7 /etc/zabbix]$vim zabbix_server.confDBPassword=centos 下面监控配置Zabbix(2) 监控配置： 术语：host groups --&gt; host --&gt; application --&gt; item --&gt; trigger --&gt; action (conditions, operations) graph: simple: 每个item定义完成后自动生成 customed：用于将多个item的数据整合于一个图形中展示 再安装zabbix的yum仓库，下面这个十自动生成yum仓库[#23#root@centos7 ~]$rpm -i http://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/zabbix-release-3.4-2.el7.noarch.rpm安装192.168.12.234[#44#root@centos7 ~]$yum install zabbix-agent zabbix-sender Server=192.168.12.167 //指定server的主机ServerActive=192.168.12.167 //这个十监控谁，给谁发送数据Hostname=master.magedu.com //标识主机名gedusnsrv2 /etc/zabbix]$systemctl start zabbix-agent.service下面图形界面配置监控 服务端[#58#root@centos7 /etc/zabbix]$yum install zabbix-get[#61#root@centos7 /etc/zabbix]$zabbix_get -h 查看[#61#root@centos7 /etc/zabbix]$zabbix_get -s 192.168.12.234 -p 10050 -k “net.if.in[ens33,packets]”2465[#26#root@centos7 ~]$zabbix_get -s 192.168.12.234 -p 10050 -k “net.if.in[ens33,packets]”133712485]]></content>
  </entry>
  <entry>
    <title><![CDATA[jekins持续发布代码]]></title>
    <url>%2F2018%2F10%2F02%2Fjekins%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B8%83%E4%BB%A3%E7%A0%81%2F</url>
    <content type="text"><![CDATA[启动jekins jekins也安装gityum install git创建文件夹cd /opt/yum install git[#14#root@centos7 /opt]$mkdir git[#16#root@centos7 /opt]$cd git[#19#root@centos7 /opt/git]$git clone http://192.168.12.142/myweb/web.git[#20#root@centos7 /opt/git]$ls -a. .. web[#45#root@centos7 /opt/git]$git config –global user.email “1069465035@qq.com“[#46#root@centos7 /opt/git]$git config –global user.name “name”[#23#root@centos7 /opt/git]$git init //初始化进入.git目录中,在config文件中就可以看得到[#54#root@centos7 /opt/git/web/.git]$vim config [core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true[remote “origin”] url = http://192.168.12.142/myweb/web.git fetch = +refs/heads/:refs/remotes/origin/[branch “master”] remote = origin merge = refs/heads/master git pull是提交代码到本地，也就是别人改代码，提SS交了，我们pull一下到本地再看 git reset --hard HEAD^ #git版本回滚，HEAD为当前版本，加一个^为上一个，^^为上上一个版本 git reflog #获取每次提交的ID，可以使用--hard根据提交的ID进行版本回退 git reset --hard 5ae4b06 #回退到指定的id版本 git branch #查看当前所处的分支 git checkout -- file #从服务器更新某个那文件覆盖到本地的文件 [#67#root@centos7 /opt/git/web]$git reset --hard HEAD^ HEAD is now at c580680 haha[#72#root@centos7 /opt/git/web]$git reset –hard HEAD^^HEAD is now at 8dba284 Add new file 准备两台服务器安装web 下面复习tomcat下面准备一台服务器安装tomcat[root@centos7 ~]#useradd www -u 2000 制定一个运行用户passwd www 设置密码[root@centos7 opt]#tar xvf apache-tomcat-7.0.59.tar.gz[root@centos7 opt]#tar xvf apache-tomcat-7.0.59.tar.gz -C /apps/ 我重新用yum安装https://blog.csdn.net/reblue520/article/details/76287541上面是视频下面是实践首先jekins官网的yum源sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.reposudo rpm –import https://pkg.jenkins.io/redhat/jenkins.io.keyyum install jenkins打开浏览器，输入ip访问8080端口http://192.168.12.159:8080/进行安装，不需要解释，选择默认安装模式3.1配置邮件通知，系统管理–系统设置 添加管理员邮箱,添加邮件yi 下面创建一个项目下面的步骤参照https://blog.csdn.net/reblue520/article/details/76287541 亲测有效]]></content>
  </entry>
  <entry>
    <title><![CDATA[gitlab]]></title>
    <url>%2F2018%2F09%2F28%2Fgitlab%2F</url>
    <content type="text"><![CDATA[jekins和gitlab了解gitlib的常用命令部署haproxy和tomcat环境 配置jenkins使用gitlib更新代码通过sonar实现代码检测GitLab是一个代码仓库，用来管理代码。Jenkins是一个自动化服务器，可以运行各种自动化构建、测试或部署任务。所以这两者结合起来，就可以实现开发者提交代码到GitLab，Jenkins以一定频率自动运行测试、构建和部署的任务，帮组开发团队更高效的集成和发布代码。关闭防火墙，禁用selinuxjjekins需要安装javajekins服务器gitlab服务器 [#1#root@centos7 ~]$java -version[#19#root@centos7 /]$yum install jenkins-2.27-1.1.noarch.rpm //上传jekins安装包[root@web-85 /]#java -version[root@web-85 /]#yum install gitlab-ce-8.13.5-ce.0.el7.x86_64.rpm //安装gitlabgitlab配置[root@web-85 gitlab]#vim gitlab.rb external_url ‘http://192.168.12.142&#39; //此虚拟机的本地地址 #使配置生效[root@web-85 gitlab]#gitlab-ctl reconfigure 同步//参考文章https://www.jianshu.com/p/b04356e014fa查看版本https://packages.gitlab.com/gitlab/gitlab-ce[root@web-85 gitlab]#cat /opt/gitlab/embedded/service/gitlab-rails/VERSION8.13.5[root@web-85 gitlab]#gitlab-ctl status //查看他启动了哪些服务http://http://192.168.12.142用ip进行访问 #重新启动GitLab gitlab-ctl restart gitlab访问修改密码之后，用户名root登陆在设置里面关掉其他的注册方式去掉这个勾选创建一个用户邮箱可以找回密码，新用户用此方法设置密码创建组用户管理下面是创建项目如果装有git那么我们就可以克隆git clone http://192.168.12.142/myweb/web.git[root@web-85 web]#git add index.html //先添加[root@web-85 web]#git commit -m “xin” 在做标记git push提交]]></content>
  </entry>
  <entry>
    <title><![CDATA[top命令]]></title>
    <url>%2F2018%2F09%2F21%2Ftop%E5%91%BD%E4%BB%A4%2Ftop%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。下面详细介绍它的使用方法。top是一个动态显示过程,即可以通过用户按键来不断刷新当前状态.如果在前台执行该命令,它将独占前台,直到用户终止该程序为止.比较准确的说,top命令提供了实时的对系统处理器的状态监视.它将显示系统中CPU最“敏感”的任务列表.该命令可以按CPU使用.内存使用和执行时间对任务进行排序；而且该命令的很多特性都可以通过交互式命令或者在个人定制文件中进行设定.如图：]]></content>
  </entry>
  <entry>
    <title><![CDATA[mysql]]></title>
    <url>%2F2018%2F09%2F18%2Fmysql%2Fmysql%2F</url>
    <content type="text"><![CDATA[1)创建数据库 create database wpj1105; 2)创建数据库 create database wpj1105; 3)判断是否存在库 : drop database if exists wpj1105; 4)使用该数据库 use wpj1105; 5)#显示数据库中的表 show tables; 6)创建表create table student( id int auto_increment primary key, name varchar(50) not null, sex varchar(20), date varchar(50), content varchar(100) )default charset=utf8; 7)查找表 select xxxxx from student; 8)显示表的结构：desc student;9)添加数据 insert into student values(null,’aa’,’男’,’1988-10-2’,’……’); 10)修改数据表的编码方式:ALTER TABLE test DEFAULT CHARACTER SET utf8 11)ALTER TABLE test CHANGE name name VARCHAR(36) CHARACTER SET utf8 NOT NULL; 该命令用于将表test中name字段的编码方式改为utf8 12)修改某一条数据update student set sex=’男’ where id=4; 13)delete from student where id=5; 14删除数据delete from student where id=5; 15)# and 且select from student where date&gt;’1988-1-2’ and date&lt;’1988-12-1’; 16)# or 或 select from student where date&lt;’1988-11-2’ or date&gt;’1988-12-1’; 17)#between select * from student where date between ‘1988-1-2’and’1988-12-1’; 18)修改数据update c set age=66 where id=2;update c set name=’花花’,age=21,sex=’女’ where id=2]]></content>
  </entry>
  <entry>
    <title><![CDATA[jekins]]></title>
    <url>%2F2018%2F09%2F01%2Fjekins%2F</url>
    <content type="text"><![CDATA[Jenkins是一款能提高效率的软件，它能帮你把软件开发过程形成工作流，典型的工作流包括以下几个步骤 开发 提交 编译 测试 发布 有了Jenkins的帮助，在这5步中，除了第1步，后续的4步都是自动化完成的，具体的，当你完成了提交，Jenkins会自动运行你的编译脚本，编译成功后，再运行你的测试脚本，这一步成功后，接着它会帮你把新程序发布出去，特别的，在最后一步，你可以选择手动发布，或自动发布，毕竟发布这件事情，还是需要人为的确认一下比较好。简而言之 Jenkins可以帮你在写完代码后，一键完成开发过程中的一系列工作 使用Jenkins的好处显而易见，它减少了你的重复劳动。更重要的是，一个团队的开发流程一开始是不一致的，不一致往往会带来各种各样的问题，最终体现在软件的质量或开发效率不够高，而Jenkins会帮你规范大家的行为，从而避免一系列的问题。安装 Jenkins安装非常简单，以CentOS为例，执行以下命令即可 sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat-stable/jenkins.reposudo rpm –import https://jenkins-ci.org/redhat/jenkins-ci.org.keysudo yum -y install jenkins 值得注意的是，如果你的操作系统是CentOS，且运行的是GCJ版本的java，则需要做一下更新 $ java -versionjava version “1.5.0”gij (GNU libgcj) version 4.4.6 20110731 (Red Hat 4.4.6-3)$ sudo yum remove java$ sudo yum install -y java-1.7.0-openjdk$ java -versionjava version “1.7.0_79”OpenJDK Runtime Environment (rhel-2.5.5.1.el6_6-x86_64 u79-b14)OpenJDK 64-Bit Server VM (build 24.79-b02, mixed mode) 如果你的Jenkins使用git作为数据传输的管道，那么的所有Jenkins节点都要安装git $ sudo yum install -y git 设置git账户 $ git config –global user.name “yourname”$ git config –global user.email “yourmail” 配置 安装成功后，配置文件在/etc/sysconfig/jenkins下，默认端口为8080，你需要设置一下防火墙，让该端口可以被外部访问到 设置允许开机启动 $ sudo chkconfig jenkins on 确保系统中有一个jenkins账户，如果没有则需要创建，理论上安装了Jenkins后，会自动创建该用户。 然后创建ssh密钥，密钥被用来在多个节点中进行免密访问，同时帮助打通git数据通道。在这之前要确认jenkins用户的home目录是否有效（在下面的例子中home是/var/bin/jenkins），并切换到jenkins用户下 $ grep jenkins /etc/passwdjenkins:x:496:496:Jenkins Continuous Integration Server:/var/lib/jenkins:/bin/bash$ su jenkins$ cd ~$ pwd/var/lib/jenkins 创建非对称密钥，执行ssh-keygen命令，并一路回车 $ ssh-keygenGenerating public/private rsa key pair.Enter file in which to save the key (/home/fengyajie/.ssh/id_rsa): Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in /home/fengyajie/.ssh/id_rsa.Your public key has been saved in /home/fengyajie/.ssh/id_rsa.pub.The key fingerprint is:The key’s randomart image is:+–[ RSA 2048]—-+| …. +=|| … …..|| . …o +|| E. . *.|| S .= + || . o + . || . o o || o o || o |+—————–+$ ls ~/.ssh/id_rsa id_rsa.pub known_hosts Jenkins是一个Master-Slave的架构，它可以把任务发布到不同的节点上执行，典型的应用场景是你有2个运行环境，一个是测试环境，一个是生产环境，你可以指定工作流中，哪些任务在测试环境中执行，哪些任务在生产环境中执行。当然，如果你没有这样的需求，也可以不配置Slave，这篇文章讨论的是有Slave的情况。 如果你需要配置Slave，在Slave节点上创建一个jenkins用户，并建立Master和Slave的授信关系（你需要将下面的host替换为具体的服务器IP，注意一定要保证Master和Slave之间是内网通信的，否则公网环境延迟较大，经常会出现Slave掉线情况） ssh jenkins@host ‘mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys’ &lt; ~/.ssh/id_rsa.pub 同时，为了让jenkins可以执行更高权限的命令，所有节点都需要把jenkins用户设置为sudo用户。当然，我这是为了偷懒，更好的办法是设置一个专门的用户组，让这个组有一定的权限，然后把jenkins加入到这个用户组。 $ sudo grep jenkins /etc/sudoersjenkins ALL=(ALL) NOPASSWD: ALL 以上为全部终端的配置，剩下操作基本都在Jenkins提供的web页面上完成设置Slave 打开Jenkins页面http://hostname:8080，进入管理页面，点击New Node 配置Node，Labels是环境设置，例如开发环境，测试环境，编译环境等，后续可以根据Lables值，指定具体的任务在某个环境中执行 设置Master到Node间的授信方式 成功后，可以在控制台看到新增的Node创建Pipeline 基本环境搭建好后，我们来配置一个工作流亲自感受一下 工作流在Jenkins中被称为pipeline，pipeline的运行行为由用户自己定义，定义的内容存放在一个Jenkinsfile文件中，并将该文件存放在git仓库的根目录，大致的流程如下： 用户将代码提交到git Jenkins从git拉取最新代码 读取根目录下的Jenkinsfile文件，并依次执行文件中定义的任务 下面是具体的配置步骤编写Jenkinsfile pipeline { agent { label ‘Production’ } stages { stage(‘Build’) { steps { echo ‘Building’ } } stage(‘Test’) { steps { echo ‘Testing’ } } stage(‘Deploy - Staging’) { steps { sh ‘./deploy staging’ sh ‘./run-smoke-tests’ } } stage(‘Sanity check’) { steps { input “Does the staging environment look ok?” } } stage(‘Deploy - Production’) { steps { sh ‘./deploy production’ } } } post { always { echo &apos;One way or another, I have finished&apos; deleteDir() /* clean up our workspace */ } success { echo &apos;I succeeeded!&apos; } unstable { echo &apos;I am unstable :/&apos; } failure { echo &apos;I failed :(&apos; } changed { echo &apos;Things were different before...&apos; } } } 以上是一个基本的Jenkinsfile模板，其中有以下几个关键概念 agent - 指定在哪台机器上执行任务，还记得上面配置Node时候填的Label吗，如果这两个label匹配得上，就在该Node中执行 stage - 组成工作流的大的步骤，这些步骤是串行的，例如build，test，deploy等 steps - 描述stage中的小步骤，同一个stage中的steps可以并行 sh - 执行shell命令 input - 需要你手动点击确定，Pipeline才会进入后续环节，常用于部署环节，因为很多时候部署都需要人为的进行一些确认 post - 所有pipeline执行完成后，会进入post环节，该环节一般做一些清理工作，同时还可以判断pipeline的执行状态 了解了这些后，你会发现写一个Jenkinsfile是一件很容易的事情。好了，现在要测试pipeline功能，把上面的代码中的sh换成echo，拷贝到你的Jenkinsfile中，并存放在git仓库的根目录创建pipeline 回到Jenkins web页面，添加pipeline 如果你想每次git commit时自动执行该pipeline，有两种方法，一种是让Jenkins对git进行轮询，每分钟检查git仓库有没有更新，如下配置 另一种方式是使用git提供的hook，该方式原理是git一旦提交，便会触发hook中的脚本，让脚本给Jenkins发送执行pipeline的指令，这种方式更优雅，但相应要做的事情更多一点，这里就不演示这种方法了，感兴趣的同学可以自己研究一下。 最后，我们需要设置git的地址，其中的授信设置，和上面说的Master到Node的授信设置一致 设置完毕后，一旦你的git仓库收到新的提交，就会触发这个pipeline的运行，以下这张图是上面Jenkinsfile例子的运行状态，可以看到当运行到Sanity check这一步时，需要你手动触发是否执行后面的操作。 下面我们来总结一下，这篇教程主要讲述了以下几个方面： Jenkins是什么，及它的应用场景举例 如何搭建一个Jenkins服务 Jenkins Pileline是什么，我们如何定义一个Pipeline 如何具体的操作一个Pipeline Have fun！ 作者：冯雅杰链接：https://www.jianshu.com/p/b524b151d35f來源：简书简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。https://www.jianshu.com/p/5c3e99de5b93]]></content>
  </entry>
  <entry>
    <title><![CDATA[linus]]></title>
    <url>%2F2018%2F08%2F31%2Flinus%2F</url>
    <content type="text"><![CDATA[2017 年 6 月，Linux 基金会首次在中国召开 LinuxCon，有幸见到 Linus Torvalds 本尊，从进入媒体视线、访谈交流到离开的三个多小时内，Linus Torvalds 一直面带微笑。 在我看来，这种微笑不是职业训练出来的，而是一个纯粹技术人发自内心的表达。这位名扬 IT 界二十余载的神级人物，想必早已过了恃才傲物、口沸目赤的阶段，内心充盈的更多是工作中获得的欣慰与肩负的责任。 在他提到不想关心 Linux 技术以外的任何事情、一周不写代码就坐立不安的时候，我似乎看见了那个 11 岁学习 BASIC 并从此再也没有离开自己所爱的大男孩儿，拥有一颗不老心的 Linus Torvalds 依然葆有着他的技术好奇。 以下文字由 InfoQ 主要整理自 LinuxCon 大会上的媒体访谈及 Linus Tourvalds、Dirk Hohndel 的交流环节。 除了技术的其他一切工作都交给基金会打理 创建之后的Linux 系统越做越好并受到广泛关注，Linus Torvalds 于 2003 年决定离开当时的公司、加入开源码发展实验室以专职投入到 Linux 内核的工作，后来 Linux 基金会正式成立。 Linus 只想做技术，不想处理技术以外的事情。“如果你是一名工程师，很有可能你只想处理自己感兴趣的技术问题，其他一切事情你都想移交给别人来处理。” 正如所愿，这就是 Linus Torvalds 和基金会的分工，基金会负责接管许可证、专利、法务等问题，处理电话、邮件和文件准备等工作，事无巨细。LinusTorvalds 说他很庆幸自己不需要担心商业和管理的问题，他只要能领到工资不担心养孩子上学的问题就很好。 Linux 基金会执行总监 Jim Zemlin 称这是正确的模式： Linux 操作系统标准价值 103 亿美元；Linux 基金会拥有 Linux、Kubernetes、Cloud Foundry、Xen 等项目，以及 CNCF 基金会、Node 基金会等，整体所写的代码价值标准为 145 亿美元；由此估算 Linux 的经济价值占据整体价值 71%，不愧为开源项目鼻祖]]></content>
  </entry>
</search>
